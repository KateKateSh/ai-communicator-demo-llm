import requests
import streamlit as st

TG_TOKEN = st.secrets["TG_TOKEN"]
SUBSCRIBERS_FILE = "subscribers.txt"

def send_to_all_subscribers(text):
    try:
        with open(SUBSCRIBERS_FILE, "r") as f:
            chat_ids = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        chat_ids = []

    for chat_id in chat_ids:
        try:
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "Markdown"
            }
            url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
            requests.post(url, json=payload, timeout=10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")

def query_llm(event, provider="together", model="meta-llama/Llama-3-8b-chat-hf"):
    system_prompt = (
        "–¢—ã ‚Äî AI-–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä —Å–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ e-commerce. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏ —á—ë—Ç–∫–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è. "
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: üìå –ü—Ä–æ–≥–Ω–æ–∑, ‚úÖ –î–µ–π—Å—Ç–≤–∏—è, üë• –†–æ–ª–∏, üß† –ü–æ—á–µ–º—É. "
        "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤."
    )

    user_prompt = f"–°–æ–±—ã—Ç–∏–µ: {event}\n–û—Ç–≤–µ—Ç:"

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ]

    headers = {"Content-Type": "application/json"}

    if provider == "together":
        api_key = st.secrets["together"]["api_key"]
        headers["Authorization"] = f"Bearer {api_key}"
        url = "https://api.together.xyz/v1/chat/completions"
    elif provider == "deepseek":
        api_key = st.secrets["deepseek"]["api_key"]
        headers["Authorization"] = f"Bearer {api_key}"
        url = "https://api.deepseek.com/v1/chat/completions"
    else:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä LLM."

    payload = {
        "model": model,
        "messages": messages,
        "temperature": 0.6,
        "top_p": 0.85,
        "stream": False
    }

    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        result = response.json()
        if "choices" in result and len(result["choices"]) > 0:
            final_output = result["choices"][0]["message"]["content"]
            send_to_all_subscribers(final_output)
            return final_output
        return "‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ LLM: {str(e)}"
