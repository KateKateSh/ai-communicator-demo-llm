import requests
import streamlit as st

HF_TOKEN = st.secrets["HF_TOKEN"]
TG_TOKEN = st.secrets["TG_TOKEN"]
SUBSCRIBERS_FILE = "subscribers.txt"

def send_to_all_subscribers(text):
    try:
        with open(SUBSCRIBERS_FILE, "r") as f:
            chat_ids = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        chat_ids = []

    for chat_id in chat_ids:
        try:
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "Markdown"
            }
            url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
            requests.post(url, json=payload, timeout=10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")

def query_huggingface(event, model="HuggingFaceH4/zephyr-7b-beta"):
    prompt = f"""
–¢—ã ‚Äî AI-–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä —Å–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ e-commerce. –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–µ –ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä—ã. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞.

–§–æ—Ä–º–∞—Ç:
üìå –ü—Ä–æ–≥–Ω–æ–∑: ...
‚úÖ –î–µ–π—Å—Ç–≤–∏—è:
- ...
- ...
üë• –†–æ–ª–∏:
- ...
üß† –ü–æ—á–µ–º—É:
...

–ü—Ä–∏–º–µ—Ä:

–°–æ–±—ã—Ç–∏–µ: "14 —Ñ–µ–≤—Ä–∞–ª—è, –î–µ–Ω—å –≤—Å–µ—Ö –≤–ª—é–±–ª—ë–Ω–Ω—ã—Ö, —Å–Ω–µ–≥ –≤ –ú–æ—Å–∫–≤–µ"

üìå –ü—Ä–æ–≥–Ω–æ–∑: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç —Å–ø—Ä–æ—Å–∞ –Ω–∞ —Ü–≤–µ—Ç—ã, –ø–æ–¥–∞—Ä–∫–∏, –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã. –í–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –∏–∑-–∑–∞ –ø–æ–≥–æ–¥—ã.
‚úÖ –î–µ–π—Å—Ç–≤–∏—è:
- –£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–ø–∞—Å—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã
- –£—Å–∏–ª–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É –≤ –¶–ê–û –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å push –≤ 17:00 —Å –∞–∫—Ü–∏–µ–π –Ω–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä
- –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ç—Ä–∏–Ω—É –≤ –õ–∞–≤–∫–µ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
üë• –†–æ–ª–∏:
- –°–∫–ª–∞–¥
- –õ–æ–≥–∏—Å—Ç–∏–∫–∞
- –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
üß† –ü–æ—á–µ–º—É:
–ü—Ä–∞–∑–¥–Ω–∏–∫ + –ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞ —Å–æ–∑–¥–∞—é—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ù—É–∂–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä–∫—É –∏ –ø–æ–∫—Ä—ã—Ç–∏–µ.

[–°–¢–û–ü –ü–†–ò–ú–ï–†]

–°–æ–±—ã—Ç–∏–µ: {event}
–û—Ç–≤–µ—Ç:
"""

    url = f"https://api-inference.huggingface.co/models/{model}"
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 300,
            "temperature": 0.6,
            "top_p": 0.85
        }
    }

    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        result = response.json()
        if isinstance(result, list) and "generated_text" in result[0]:
            final_output = clean_response(result[0]["generated_text"])
            send_to_all_subscribers(final_output)
            return final_output
        return "[‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞]"
    except Exception as e:
        return f"[‚ùå –û—à–∏–±–∫–∞ LLM: {str(e)}]"

def clean_response(raw_text):
    if "[–°–¢–û–ü –ü–†–ò–ú–ï–†]" in raw_text:
        raw_text = raw_text.split("[–°–¢–û–ü –ü–†–ò–ú–ï–†]")[-1]
    if "<<END>>" in raw_text:
        raw_text = raw_text.split("<<END>>")[0]
    start = raw_text.find("üìå –ü—Ä–æ–≥–Ω–æ–∑:")
    return raw_text[start:].strip() if start != -1 else raw_text.strip()
